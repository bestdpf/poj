//#include<iostream>
#include"stdio.h"
#include<iterator>
#include<map>
#include<vector>
#include<string>
//#include<cstring>
#include<algorithm>
#include<utility>
#include"string.h"
using namespace std;
/*
//test heap sort
template<class T>
T* dpfHeapSort(T*array,int n)
{
	T ret[n];
	make_heap(array,array+n);
	
	
}
*/
/*
int char2integer(char c,map<char,int> tab)
{
	if(tab.find(c)!=tab.end())return tab[c];
	else return 0;
}
*/

//compare
/*
bool operator <(string s1,string s2)
{
	if(s1.size()!=s2.size())
	{
		cerr<<"size not equal"<<endl;
		return true;
	}
	int i;
	for(i=0;i<s1.size();i++){
		if(s1[i]!=s2[i])return s1[i]<s2[i];
		else continue;
	}
	return true;//equal
}
*/
/*
//other version
bool operator<(string& s1,string& s2)
{
	const char* cstr1=s1.c_str();
	const char* cstr2=s2.c_str();
	int num1=atoi(cstr1);
	int num2=atoi(cstr2);
	return num1<num2;
}


bool cmp(string s1,string s2){
	return (s1<s2);
}
*/

int char2int(char c)
{
	switch(c)
	{
		case 'A': case'B': case'C': return 2;
		case 'D': case'E': case'F': return 3;
		case 'G': case'H': case'I': return 4;
		case 'J': case'K': case'L': return 5;
		case 'M': case'N': case'O': return 6;
		case 'P': case'R': case'S': return 7;
		case 'T': case'U': case'V': return 8;
		case 'W': case'X': case'Y': return 9;
		default: return 0;
	}
}

void printStr(const char* s)
{
	unsigned int i;
	for(i=0;i<strlen(s);i++)
	{
		printf("%c",s[i]);
		if(i==2)printf("-");
	}
	return;
}
/*
char* convertStr(char* str)
{
	unsigned int i;
	char ret[8];
	int cnt=0;
	for(i=0;i<strlen(str);i++)
	{
		if(str[i]>='A'&&str[i]<='Z')str[i]=char2int(str[i])+'0';
		if(str[i]!='-')ret[cnt++]=str[i];
	}
	return ret;
}
*/
int main(int argc,char* argv[])
{
	/*
	map<char,int> tab;
	tab['A']=tab['B']=tab['C']=2;
	tab['D']=tab['E']=tab['F']=3;
	tab['G']=tab['H']=tab['I']=4;
	tab['J']=tab['K']=tab['L']=5;
	tab['M']=tab['N']=tab['O']=6;
	tab['P']=tab['R']=tab['S']=7;
	tab['T']=tab['U']=tab['V']=8;
	tab['W']=tab['X']=tab['Y']=9;
	*/
	map<string,int> retMap;	
	//vector<string,int>retVec;

	string finalVec[50000];
	int full=0;
	int n;
	scanf("%d",&n);
	int i;
	string tmp;
	char s[100];
	char sd[8];
	for(i=0;i<n;i++)
	{
		scanf("%s",s);
		int j;
		int count=0;
		for(j=0;j<strlen(s);j++)
		{
			if(s[j]>='A'&&s[j]<='Z')s[j]=char2int(s[j])+'0';
			if(s[j]!='-')sd[count++]=s[j];
		}
		tmp=string(sd);
		//printf("%s\n",tmp.c_str());
		//printf(retMap.find(tmp)==retMap.end()?"fail\n":"success\n");
		if(retMap.find(tmp)==retMap.end())
		{
			retMap.insert(make_pair<string,int>(tmp,1));
		}
		else retMap[tmp]++;
	}
	//map<string,int>finalMap;
	map<string,int>::iterator it;
	for(it=retMap.begin();it!=retMap.end();it++)
	{
		//printStr(it->first.c_str());
		//printf(" %d\n\n\n",it->second);
		if(it->second>1)
		{
		finalVec[full]=it->first;
		full++;
		}
	}
	make_heap(finalVec,finalVec+full);
	//vector<string>::iterator it2;
	if(full==0)printf("No duplicates.\n");
	else	
	{
		for(i=full-1;i>=0;i--)
			{
			printStr(finalVec[i].c_str());
			printf(" %d\n",retMap[finalVec[i]]);
			}
	}
	return 0;
}
