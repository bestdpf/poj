#include"stdio.h"
#include<list>
#include<algorithm>
#include<iterator>
using namespace std;
typedef struct nodeD{
	int val;
	int cnt;
	int ofs;
}node;

int main(int argc,char*argv[])
{
	int w;//width
	int tmpVal=0;
	int tmpCnt=0;
	node tmpNode;
	node lastNode,zeroNode;
	lastNode.val=0;
	lastNode.cnt=0;
	lastNode.ofs=0;
	list<node> inList;
	list<node> outList;
	list<node>::iterator it[9];
	while(true)
	{
	scanf("%d",&w);
	//printf("\n\n\nnew image %d\n",w);
	int dist[]={-w-1,-w,-w+1,-1,0,1,w-1,w,w+1};
	int pixCnt=0;
	if(w==0)break;//end
	//do-while build inList;
	scanf("%d %d",&tmpVal,&tmpCnt);
	while(tmpVal!=0||tmpCnt!=0)	
	{
	//scanf("%d %d",&tmpVal,&tmpCnt);
	//printf("new node %d %d\n",tmpVal,tmpCnt);
	tmpNode.val=tmpVal;
	tmpNode.cnt=tmpCnt;
	tmpNode.ofs=pixCnt;
	//printf("this node val: %d cnt: %d ofs: %d\n",tmpNode.val,tmpNode.cnt,tmpNode.ofs);
	inList.push_back(tmpNode);
	pixCnt+=tmpCnt;
	scanf("%d %d",&tmpVal,&tmpCnt);
	}
	//first level generate outList
	tmpNode.val=0;
	tmpNode.cnt=0;
	tmpNode.ofs=0;
	zeroNode.val=0;
	zeroNode.cnt=0;
	zeroNode.ofs=0;
	int pos=0;
	int i;
	list<node>::iterator it1=inList.begin();
	for(i=0;i<9;i++)
	{
	//	printf("init it[]\n");
	//	printf("%d Vs. %d\n",it1->ofs+it1->cnt,pos+dist[i]);
		while(it1->ofs+it1->cnt<=pos+dist[i])it1++;
		it[i]=it1;
	}
	//printf("just after init it[]\n");
	//it={inList.begin()};
	int zeroLeft=0,zeroRight=0;
	while(pos<pixCnt)
	{	
		//printf("pos = %d\n",pos);
		if(pos==it[4]->ofs)//the first pix of current node,test zero
		{
			if(it[4]->cnt>2*w+2)
			{
			zeroLeft=pos+w+1;
			zeroRight=pos+it[4]->cnt-w-1;
			zeroNode.cnt=zeroRight-zeroLeft;
			//printf("zeroNode build %d\n",zeroNode.cnt);
			}
		}
		int maxDiff=0;
		for(i=0;i<9;i++)
		{
			/*
			if(pos<w&&i<3)continue;
			if(pos>pixCnt-w&&i>5)continue;
			if(pos%w==0&&i==3)continue;
			if(pos%w==w-1&&i==5)continue;
			if(i==4)continue;//itself
			*/
			if((pos<w&&i<3)||(pos>pixCnt-w&&i>5)||(pos%w==0&&i%3==0)||(pos%w==w-1&&i%3==2)||(i==4))continue;
			//if(pos==20)printf("special test pos=%d i=%d not continue\n",pos,i);
			if(pos+dist[i]>=0&&pos+dist[i]<pixCnt)maxDiff=max(maxDiff,abs(it[i]->val-it[4]->val));
		}
		//printf("pos: %d dif: %d\n",pos,maxDiff);
		if(tmpNode.val==maxDiff)
		{
			tmpNode.cnt++;
		}
		else
		{
			if(tmpNode.cnt>0)
			{//old node has value
				/*
				if(tmpNode.val==lastNode.val)
				{
					outList.back()->cnt+=tmpNode.cnt;//the same, so push & merge
					lastNode=tmpNode;
				}
				else//just push_back the node, don't need merge, and make new tmpNode
				{
					outList.push_back(tmpNode);
					lastNode=tmpNode;
					tmpNode.cnt=1;
					tmpNode.val=maxDiff;
				}
				*/
				//printf("change node push_back %d %d\n",tmpNode.val,tmpNode.cnt);
				outList.push_back(tmpNode);
				tmpNode.cnt=0;
				tmpNode.val=0;
			}
			//else//just make the new tmpNode;
			//{
			//make the new node
			tmpNode.val=maxDiff;
			tmpNode.cnt=1;
			//}
		}
		pos++;//increase 1
		if(zeroRight>zeroLeft&&pos==zeroLeft)
		{//reach zero node
			/*
			if(lastNode.val==0)//lastNode is also zero
			{
			}
			{
			}
			*/
			if(tmpNode.cnt>0)
			{
				//printf("before zero push_back %d %d\n",tmpNode.val,tmpNode.cnt);
				outList.push_back(tmpNode);
				tmpNode.cnt=0;
				tmpNode.val=0;
			}
			//printf("zero push_back %d %d\n",zeroNode.val,zeroNode.cnt);
			outList.push_back(zeroNode);
			zeroNode.cnt=0;
			pos=zeroRight;
			zeroLeft=0;
			zeroRight=0;
		}
		//set it[]
		for(i=0;i<9;i++)
		{
	//		printf("%d times reset it[]: %d Vs %d\n",i,it[i]->ofs+it[i]->cnt,pos+dist[i]);
			while(it[i]->ofs+it[i]->cnt<=pos+dist[i]&&it[i]!=inList.end())it[i]++;
		}
	}
	
		if(tmpNode.cnt>0)
		{
			if(tmpNode.cnt>0)
			{
				outList.push_back(tmpNode);
				tmpNode.cnt=0;
				tmpNode.val=0;
				tmpNode.ofs=0;
			}
		}
		//printf("second level\n\n");
		//second level
		//printf("%d\n",w);
		list<node>::iterator it2=outList.begin()/*,it3=outList.begin()*//*,it4=outList.begin()*/;
		//it3++;
		i=0;
		while(true)
		{
			//printf("test remove %d\n",i);
			//printf("%d Vs %d\n",it2->val,it3->val);
			
			list<node>::iterator it4=it2;
			list<node>::iterator it3=it4++;
			if(it3==outList.end())break;
			
			if(it2->val==it4->val)
			{
			//	printf("equal before erase\n");
				it2->cnt+=it4->cnt;
				outList.erase(it4);
				//it4=it2;
				//it3=it4++;
			//	printf("equal stay\n");
			}
			else
			{
				it2++;
			//	printf("not equal just advance\n");
			}
		}		
		/*	
		for(it2=outList.begin();it2!=outList.end();it2++)
		{
			it4=it2;
			it3=it4++;
			if(it3==outList.end())break;
			if(it2->val==it3->val)
			{
				//printf("same\n");
				it2->cnt+=it3->cnt;
				//printf("%d %d\n",it2->val,it2->cnt+it3->cnt);
				//it3->ofs=1;
				outList.erase(it3);
				it2--;
				//printf("test ofs %d\n",it3->ofs);
			}
			//else printf("%d %d\n",it2->val,it2->cnt);
		}
		*/
		
		//dump outList
		printf("%d\n",w);
		for(it2=outList.begin();it2!=outList.end();it2++)
		{
			printf("%d %d\n",it2->val,it2->cnt);
		}
		
		printf("0 0\n");
		//free mem
		inList.clear();
		outList.clear();
	}
	printf("0\n");
	return 0;
}
