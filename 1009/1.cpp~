#include"stdio.h"
#include<vector>
#include<iterator>
#include<algorithm>

using namespace std;
typedef struct nodeD{
	int val;
	int cnt;
}node;

int main()
{
	int w;
	vector<node>nodeVec;
	vector<node>out;
	node tmp;
	int val,num;
	int pixNum;
	while(scanf("%d",&w)!=EOF)
	{
		if(w==0)break;
		pixNum=0;
		do{
			scanf("%d %d",val,num);
			tmp.val=val;
			tmp.num=num;
			pixNum+=num;
			nodeVec.push_back(tmp);
		}while(val!=0||num!=0)
		int roudNdNum={0,0,0,0,0,0,0,0,0};//around node num
		int pos=0;int maxDiff=0;
		int zeroLeft=-1,zeroRight=0;//zero zone include left, but not right;
		node nowNode;
		node zeroNode;
		nowNode.val=0;
		nowNode.cnt=0;
		zeroNode.val=0;
		zeroNode.cnt=0;
		bool hasZero=false;
		bool testZero=true;//only test for first element in this node;
		bool lastZero=false;//last node is zeroNode, use to merge zeroNode;
		while(pos<pixNum)
		{
			if(hasZero&&zeroLeft==pos)
			{
				if(lastZero==true&&nowNode.val==0)
				{
					out.back().cnt+=nowNode.cnt+zeroNode.cnt;
				}
				else if(nowNode.val==0)
				{
					zeroNode.cnt+=nowNode.cnt;
					out.push_back(zeroNode);
				}
				else
				{ 
					out.push_back(nowNode);
					out.push_back(zeroNode);
				}
				hasZero=false;
				lastZero=true;
				pos=zeroRight;//jump to the next
			}
			if(testZero)
			{
				if(nodeVec[roudNdNum[4]])
			}
			if(pos-w-1>=0)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[0].val));
			if(pos-w>=0)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[1].val));
			if(pos-w+1>=0)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[2].val));
			if(pos-1>=0)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[3].val));
			if(pos+1<pixNum)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[5].val));
			if(pos+w-1<pixNum)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[6].val));
			if(pos+w<pixNum)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[7].val));
			if(pos+w+1<pixNum)maxDiff=max(maxDiff,abs(nodeVec[4].val-nodeVec[8].val));
		}
	
		nodeVec.clear();//free mem
		out.clear();
	}
	return 
